<!doctype html>
<html class="no-js" lang="en">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">

	<title>How to get Started Programming on Max OS X, Part 3</title>
	<meta name="description" content="">
	<meta name="author" content="">

	<meta name="viewport" content="width=device-width,initial-scale=1">

	<link rel="stylesheet" href="../../../../bootstrap/bootstrap.min.css">
</head>
<body>

<div class="container">
	<div class="content">
		<div class="page-header">
<h1>starlings of the slipstream</h1>
<h3>thoughts on computers, life, philosophy</h3>
			</div>
			
	<div class="row">
		<div class="span3">
			<div class="sidebar">
<ul>	
	<li><a href="/index.html">Home</a></li>
	<li><a href="/about.html">About</a></li>
	<li><a href="/all-posts.html">All Posts</a></li>
	<li><a href="/projects.html">Projects</a></li>
	<li><a href="/writings.html">Writings</a></li>
</ul>
</div>
			</div>
			<div class="span13">
				<div class="post">
				<h3>
				How to get Started Programming on Max OS X, Part 3
				</h3>
		<p>Okay, I have confession to make: I wasn&#8217;t exactly sure what I wanted to cover today, and I am going to probably just talk about a handful of disparate topics that I think might be helpful. Again, if you would like info on anything that I fail to cover here, just let me know, and I&#8217;d be happy to oblige as best I can. Anyway, let&#8217;s get started. So last time I finished up introducing the command-line and I tried to motivate it a bit, but I didn&#8217;t have any concrete examples so I don&#8217;t know how much of a sense you&#8217;ve gotten of how it&#8217;s used in a day-to-day workflow. To remedy that, I&#8217;m going to give myself some tasks I want to accomplish, and I&#8217;ll show you the process I use to get that done. Task 1: Set up Haskell on my computer so that I can play around with it, see how I like it. If I didn&#8217;t know any better, I would probably start by googling Haskell, and seeing what info was provided on the official language website. But I, and now you, know better, and we&#8217;re going to do something entirely different. The reason that I don&#8217;t recommend this approach to most people is that to achieve full integration of the language with your environment is a little tricky and requires some knowledge of the way that the shell works that is extraneous to the end goal of being able to program in Haskell. What we&#8217;re going to do instead of going to the Haskell website is use a really useful piece of free open-source software called Homebrew. Homebrew is a package manager, which is a utility program that provides a set of standardized routines that can be used to manage other software on a computer. The concept of a package manager originates on Linux systems, though it is a pretty universal idea. You have a computer. You want to install a calendar application. There are immediately a bunch of questions that you have to answer to get that done. Where do you install the application? Do I need to have anything else installed for it to work properly? How do I know that this program isn&#8217;t already installed on this computer, and that I just haven&#8217;t seen it? What do I download to get this working right? Where do I find it? While none of these questions are individually that difficult to answer,</p>
				</div>
				</div>
	</div>
	</div>
<div class="footer">
	<p>&copy; Spencer Gordon 2011- </p>
	<p>Icons courtesy of <a	href="http://somerandomdude.com/work/sanscons/">P.J. Onori</a></p>
</div>

</div>
</body>
</html>
