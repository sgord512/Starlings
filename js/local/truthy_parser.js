module.exports = (function(){
  /* Generated by PEG.js 0.6.2 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "expr": parse_expr,
        "exprRest": parse_exprRest,
        "single": parse_single
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "expr";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse_expr() {
        var cacheKey = 'expr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var savedPos3 = pos;
        if (input.substr(pos, 1) === "-") {
          var result9 = "-";
          pos += 1;
        } else {
          var result9 = null;
          if (reportMatchFailures) {
            matchFailed("\"-\"");
          }
        }
        if (result9 !== null) {
          var result10 = parse_single();
          if (result10 !== null) {
            var result11 = parse_exprRest();
            if (result11 !== null) {
              var result7 = [result9, result10, result11];
            } else {
              var result7 = null;
              pos = savedPos3;
            }
          } else {
            var result7 = null;
            pos = savedPos3;
          }
        } else {
          var result7 = null;
          pos = savedPos3;
        }
        var result8 = result7 !== null
          ? (function(s, eR) { if(eR.length === 0) {
              return ["negation of", s] 
            }
            else { 
              return [["negation of", s], eR.shift(), eR.shift()]
            }
          })(result7[1], result7[2])
          : null;
        if (result8 !== null) {
          var result6 = result8;
        } else {
          var result6 = null;
          pos = savedPos2;
        }
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var result4 = parse_single();
          if (result4 !== null) {
            var result5 = parse_exprRest();
            if (result5 !== null) {
              var result2 = [result4, result5];
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(s, eR) { if(eR.length === 0) { 
                return [s]
              }
              else {
                return [s, eR.shift(), eR.shift()]
              }
            })(result2[0], result2[1])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_exprRest() {
        var cacheKey = 'exprRest@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos7 = pos;
        var savedPos8 = pos;
        if (input.substr(pos, 1) === ">") {
          var result22 = ">";
          pos += 1;
        } else {
          var result22 = null;
          if (reportMatchFailures) {
            matchFailed("\">\"");
          }
        }
        if (result22 !== null) {
          var result23 = parse_expr();
          if (result23 !== null) {
            var result20 = [result22, result23];
          } else {
            var result20 = null;
            pos = savedPos8;
          }
        } else {
          var result20 = null;
          pos = savedPos8;
        }
        var result21 = result20 !== null
          ? (function(e) { return ["implies", e] })(result20[1])
          : null;
        if (result21 !== null) {
          var result19 = result21;
        } else {
          var result19 = null;
          pos = savedPos7;
        }
        if (result19 !== null) {
          var result0 = result19;
        } else {
          var savedPos5 = pos;
          var savedPos6 = pos;
          if (input.substr(pos, 1) === "=") {
            var result17 = "=";
            pos += 1;
          } else {
            var result17 = null;
            if (reportMatchFailures) {
              matchFailed("\"=\"");
            }
          }
          if (result17 !== null) {
            var result18 = parse_expr();
            if (result18 !== null) {
              var result15 = [result17, result18];
            } else {
              var result15 = null;
              pos = savedPos6;
            }
          } else {
            var result15 = null;
            pos = savedPos6;
          }
          var result16 = result15 !== null
            ? (function(e) { return ["biconditially implies", e] })(result15[1])
            : null;
          if (result16 !== null) {
            var result14 = result16;
          } else {
            var result14 = null;
            pos = savedPos5;
          }
          if (result14 !== null) {
            var result0 = result14;
          } else {
            var savedPos3 = pos;
            var savedPos4 = pos;
            if (input.substr(pos, 1) === "V") {
              var result12 = "V";
              pos += 1;
            } else {
              var result12 = null;
              if (reportMatchFailures) {
                matchFailed("\"V\"");
              }
            }
            if (result12 !== null) {
              var result13 = parse_expr();
              if (result13 !== null) {
                var result10 = [result12, result13];
              } else {
                var result10 = null;
                pos = savedPos4;
              }
            } else {
              var result10 = null;
              pos = savedPos4;
            }
            var result11 = result10 !== null
              ? (function(e) { return ["or", e] })(result10[1])
              : null;
            if (result11 !== null) {
              var result9 = result11;
            } else {
              var result9 = null;
              pos = savedPos3;
            }
            if (result9 !== null) {
              var result0 = result9;
            } else {
              var savedPos1 = pos;
              var savedPos2 = pos;
              if (input.substr(pos, 1) === "*") {
                var result7 = "*";
                pos += 1;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\"*\"");
                }
              }
              if (result7 !== null) {
                var result8 = parse_expr();
                if (result8 !== null) {
                  var result5 = [result7, result8];
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
              var result6 = result5 !== null
                ? (function(e) { return ["and", e] })(result5[1])
                : null;
              if (result6 !== null) {
                var result4 = result6;
              } else {
                var result4 = null;
                pos = savedPos1;
              }
              if (result4 !== null) {
                var result0 = result4;
              } else {
                var savedPos0 = pos;
                if (input.substr(pos, 0) === "") {
                  var result2 = "";
                  pos += 0;
                } else {
                  var result2 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"\"");
                  }
                }
                var result3 = result2 !== null
                  ? (function() { return [] })()
                  : null;
                if (result3 !== null) {
                  var result1 = result3;
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_single() {
        var cacheKey = 'single@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        if (input.substr(pos).match(/^[a-z]/) !== null) {
          var result8 = input.charAt(pos);
          pos++;
        } else {
          var result8 = null;
          if (reportMatchFailures) {
            matchFailed("[a-z]");
          }
        }
        var result9 = result8 !== null
          ? (function(c) { return c })(result8)
          : null;
        if (result9 !== null) {
          var result7 = result9;
        } else {
          var result7 = null;
          pos = savedPos2;
        }
        if (result7 !== null) {
          var result0 = result7;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          if (input.substr(pos, 1) === "(") {
            var result4 = "(";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"(\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse_expr();
            if (result5 !== null) {
              if (input.substr(pos, 1) === ")") {
                var result6 = ")";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\")\"");
                }
              }
              if (result6 !== null) {
                var result2 = [result4, result5, result6];
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(e) { return [e] })(result2[1])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();